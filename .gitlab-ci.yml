# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

image: gcc

before_script:
 - apt-get update --yes
 - apt-get install --yes cmake
 - apt-get install ninja-build
 - apt-get install doxygen --assume-yes
 - apt-get install python3-opencv --assume-yes

# Installing OpenCV from source
 - apt install -y g++ wget unzip

 - apt install liblz-dev libtiff5 libtiff5-dev libtiff-tools libwebp6
 - apt-get install vlc ubuntu-restricted-extras

 - apt install liblz-dev -y
 - apt-get install python3-dev python3-numpy python3-pip -y
 - apt-get install libavcodec-dev libavformat-dev libavutil-dev libswscale-dev -y
 - apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev -y
 - apt-get install libpng-dev -y
 - apt-get install libjpeg-dev -y
 - apt-get install libopenexr-dev -y
 - apt-get install libtiff-dev -y
 - apt-get install libwebp-dev -y
 - apt-get install qt5-default -y

 - apt install libavcodec-dev libavformat-dev libswscale-dev libavresample-dev -y
 - apt install libxvidcore-dev x264 libx264-dev libfaac-dev libmp3lame-dev libtheora-dev  -y  
 - apt install libfaac-dev libmp3lame-dev libvorbis-dev -y
 - apt-get install libgtk-3-dev -y
 - pip3 install -U pip numpy

 - apt-get install libtbb-dev -y
 - apt-get install libprotobuf-dev protobuf-compiler -y
 - apt-get install libgphoto2-dev libeigen3-dev libhdf5-dev doxygen -y
 - apt-get install libdc1394-22 libdc1394-22-dev libxine2-dev libv4l-dev v4l-utils -y
 - ln -s -f /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h

# Download
 - cd /tmp
 - wget -O opencv.zip https://github.com/opencv/opencv/archive/master.zip
 - wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/master.zip
 - unzip opencv.zip
 - unzip opencv_contrib.zip

# Install
 - BUILD_DIR="opencv_build"
 - mkdir $BUILD_DIR
 - cd $BUILD_DIR

 - CUDA_ARCH_BIN="75" # You may replace this with your GPU architecture
 - cmake \
  -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib-master/modules \
  -DCMAKE_BUILD_TYPE=Release \
  -DOPENCV_ENABLE_NONFREE=ON \
  -DBUILD_opencv_python3=ON \
  -DINSTALL_TESTS=ON \
  -DINSTALL_C_EXAMPLES=ON \
  -DINSTALL_PYTHON_EXAMPLES=ON \
  -DWITH_CUDNN=ON \
  -DOPENCV_DNN_CUDA=ON \
  -DWITH_CUDA=ON \
  -DCUDA_ARCH_BIN=$CUDA_ARCH_BIN \
  -DWITH_CUBLAS=ON \
  -DENABLE_FAST_MATH=ON \
  -DCUDA_FAST_MATH=ON \
  -DWITH_OPENGL=ON \
  -DWITH_GSTREAMER=ON \
  -DOPENCV_GENERATE_PKGCONFIG=ON \
  -DWITH_TBB=ON \
  -DWITH_V4L=ON \
  -DWITH_QT=ON \
  -DWITH_OPENGL=ON \
  -DOPENCV_GENERATE_PKGCONFIG=ON \
  -DOPENCV_PC_FILE_NAME=opencv.pc \
  -DBUILD_EXAMPLES=ON \
  ../opencv-master

 - NUM_CPU_CORES=$(grep -c ^processor /proc/cpuinfo)
 - cmake --build . -j $NUM_CPU_CORES

 - apt install checkinstall libssl-dev -y
 - checkinstall --pkgname opencv

stages:
  - build

build-job:
  tags:
    - alpine-docker
  stage: build
  artifacts:
    paths:
    - BUILD/Documentation/
  script:
    - mkdir BUILD
    - cd BUILD
    - cmake -G "Ninja" ../ArcStreamLabs
    - ninja
    - ./tests
    - cmake --build . --target BuildDoc

